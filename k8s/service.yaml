apiVersion: v1
kind: Service
metadata:
  name: anomaly-detection-api-service
  namespace: blockchain-anomaly-detection
  labels:
    app: anomaly-detection
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/api/metrics"
spec:
  type: ClusterIP
  selector:
    app: anomaly-detection
    component: api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

---
apiVersion: v1
kind: Service
metadata:
  name: anomaly-detection-api-headless
  namespace: blockchain-anomaly-detection
  labels:
    app: anomaly-detection
    component: api
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: anomaly-detection
    component: api
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: blockchain-anomaly-detection
  labels:
    app: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP

---
# LoadBalancer service (if you need external access)
# Uncomment and configure if deploying on cloud with LoadBalancer support
# apiVersion: v1
# kind: Service
# metadata:
#   name: anomaly-detection-api-lb
#   namespace: blockchain-anomaly-detection
#   labels:
#     app: anomaly-detection
#     component: api
# spec:
#   type: LoadBalancer
#   selector:
#     app: anomaly-detection
#     component: api
#   ports:
#   - name: http
#     port: 80
#     targetPort: 8000
#     protocol: TCP
#   - name: https
#     port: 443
#     targetPort: 8000
#     protocol: TCP
#   loadBalancerSourceRanges:
#   - 0.0.0.0/0  # RESTRICT THIS IN PRODUCTION
