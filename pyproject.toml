[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "blockchain-anomaly-detection"
version = "0.1.0"
description = "A comprehensive system for detecting anomalies in blockchain transactions"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["blockchain", "anomaly-detection", "machine-learning", "ethereum", "data-analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "pandas==2.0.3",
    "numpy==1.24.3",
    "scikit-learn==1.2.2",
    "statsmodels==0.13.5",
    "matplotlib==3.7.1",
    "seaborn==0.12.2",
    "requests==2.31.0",
    "dask[complete]==2023.5.0",
    "distributed==2023.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.2",
    "pytest-cov>=4.1.0",
    "black>=23.3.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
]
sentry = [
    "sentry-sdk>=1.25.0",
]
all = [
    "blockchain-anomaly-detection[dev,sentry]",
]

[project.urls]
Homepage = "https://github.com/arec1b0/blockchain-anomaly-detection"
Documentation = "https://github.com/arec1b0/blockchain-anomaly-detection/blob/main/README.md"
Repository = "https://github.com/arec1b0/blockchain-anomaly-detection"
Issues = "https://github.com/arec1b0/blockchain-anomaly-detection/issues"

[project.scripts]
blockchain-anomaly-detection = "src.main:main"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
